// ===========================================================================
// Benchmarking_StdVector_Reserve.txt
// Initialization of std::vector with / without using method 'reserve' (capacity)
// ===========================================================================

static constexpr int VectorSize = 100;
//static constexpr int VectorSize = 10'000;

static void VecPushBack(benchmark::State& state) {

    const auto size = state.range(0);

    for (auto _ : state) {
        std::vector<char> vec;
        for (auto i = 0; i < size; ++i)
            vec.push_back(' ');

        benchmark::DoNotOptimize(vec);
    }
}

static void VecReserve(benchmark::State& state) {

    const auto size = state.range(0);

    for (auto _ : state) {
        std::vector<char> vec;
        vec.reserve(size);
        for (auto i = 0; i < size; ++i)
            vec.push_back(' ');

        benchmark::DoNotOptimize(vec);
    }
}

BENCHMARK(VecPushBack) -> Arg(VectorSize);
BENCHMARK(VecReserve) -> Arg(VectorSize);

// ===========================================================================
// End-of-File
// ===========================================================================
