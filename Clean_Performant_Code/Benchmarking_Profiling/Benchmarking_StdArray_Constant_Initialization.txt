// ===========================================================================
// Benchmarking_StdArray_Constant_Initialization.txt
// Initialization of std::array with a constant value
// ===========================================================================

#include <execution>

static constexpr int Size = 10'000;      // release

// need array in global data space, stack isn't suited for large objects
std::array<double, Size> values;

static void ArrayConstantInitializationClassicForLoop(benchmark::State& state) {
  for (auto _ : state) {
    for (size_t i{}; i != values.size(); ++i) {
      values[i] = 123.0;
    }
    benchmark::DoNotOptimize(values);
  }
}

static void ArrayConstantInitializationIteratorBased(benchmark::State& state) {
  for (auto _ : state) {
    for (auto it{ values.begin() }; it != values.end(); ++it) {
      *it = 123.0;
    }
    benchmark::DoNotOptimize(values);
  }
}

static void ArrayConstantInitializationStdFill(benchmark::State& state) {
  for (auto _ : state) {
    std::fill(values.begin(), values.end(), 123.0);
    benchmark::DoNotOptimize(values);
  }
}

static void ArrayConstantInitializationStdFillParallelized(benchmark::State& state) {
  for (auto _ : state) {
    std::fill(std::execution::par, values.begin(), values.end(), 123.0);
    benchmark::DoNotOptimize(values);
  }
}

static void ArrayConstantInitializationStdForEach(benchmark::State& state) {
  for (auto _ : state) {
    std::for_each(
      values.begin(),
      values.end(),
      [](auto& elem) { elem = 123.0; }
    );
    benchmark::DoNotOptimize(values);
  }
}

static void ArrayConstantInitializationRangeBasedForLoop(benchmark::State& state) {
  for (auto _ : state) {
    for (auto& elem : values) {
      elem = 123.0;
    }
    benchmark::DoNotOptimize(values);
  }
}

static void ArrayConstantInitializationStdGenerate(benchmark::State& state) {
  for (auto _ : state) {
    std::generate(
      values.begin(),
      values.end(),
      []() { return 123.0; }
    );
    benchmark::DoNotOptimize(values);
  }
}

BENCHMARK(ArrayConstantInitializationClassicForLoop);
BENCHMARK(ArrayConstantInitializationClassicForLoop);
BENCHMARK(ArrayConstantInitializationIteratorBased);
BENCHMARK(ArrayConstantInitializationStdFill);
BENCHMARK(ArrayConstantInitializationStdFillParallelized);
BENCHMARK(ArrayConstantInitializationStdForEach);
BENCHMARK(ArrayConstantInitializationRangeBasedForLoop);
BENCHMARK(ArrayConstantInitializationStdGenerate);

// ===========================================================================
// End-of-File
// ===========================================================================
