// ===========================================================================
// Benchmarking_StdVector_Constant_Initialization.txt
// Initialization of std::vector with a constant value
// ===========================================================================

#include <execution>

static constexpr int Size = 10'000;      // release

static void VectorConstantInitializationClassicForLoop(benchmark::State& state) {
  for (auto _ : state) {
    std::vector<double> values(Size);
    for (size_t i{}; i != values.size(); ++i) {
      values[i] = 123.0;
    }
    benchmark::DoNotOptimize(values);
  }
}

static void VectorConstantInitializationIteratorBased(benchmark::State& state) {
  for (auto _ : state) {
    std::vector<double> values(Size);
    for (auto it{ values.begin() }; it != values.end(); ++it) {
      *it = 123.0;
    }
    benchmark::DoNotOptimize(values);
  }
}

static void VectorConstantInitializationStdFill(benchmark::State& state) {
  for (auto _ : state) {
    std::vector<double> values(Size);
    std::fill(values.begin(), values.end(), 123.0);
    benchmark::DoNotOptimize(values);
  }
}

static void VectorConstantInitializationStdFillParallelized(benchmark::State& state) {
  for (auto _ : state) {
    std::vector<double> values(Size);
    std::fill(std::execution::par, values.begin(), values.end(), 123.0);
    benchmark::DoNotOptimize(values);
  }
}

static void VectorConstantInitializationStdForEach(benchmark::State& state) {
  for (auto _ : state) {
    std::vector<double> values(Size);
    std::for_each(
      values.begin(),
      values.end(),
      [](auto& elem) { elem = 123.0; }
    );
    benchmark::DoNotOptimize(values);
  }
}

static void VectorConstantInitializationRangeBasedForLoop(benchmark::State& state) {
  for (auto _ : state) {
    std::vector<double> values(Size);
    for (auto& elem : values) {
      elem = 123.0;
    }
    benchmark::DoNotOptimize(values);
  }
}

static void VectorConstantInitializationStdGenerate(benchmark::State& state) {
  for (auto _ : state) {
    std::vector<double> values(Size);
    std::generate(
      values.begin(),
      values.end(),
      []() { return 123.0; }
    );
    benchmark::DoNotOptimize(values);
  }
}

static void VectorConstantInitializationUserDefinedCtor(benchmark::State& state) {
  for (auto _ : state) {
    std::vector<double> values(Size, 123.0);
    benchmark::DoNotOptimize(values);
  }
}

BENCHMARK(VectorConstantInitializationClassicForLoop);
BENCHMARK(VectorConstantInitializationClassicForLoop);
BENCHMARK(VectorConstantInitializationIteratorBased);
BENCHMARK(VectorConstantInitializationStdFill);
BENCHMARK(VectorConstantInitializationStdFillParallelized);
BENCHMARK(VectorConstantInitializationStdForEach);
BENCHMARK(VectorConstantInitializationRangeBasedForLoop);
BENCHMARK(VectorConstantInitializationStdGenerate);
BENCHMARK(VectorConstantInitializationUserDefinedCtor);

// ===========================================================================
// End-of-File
// ===========================================================================
