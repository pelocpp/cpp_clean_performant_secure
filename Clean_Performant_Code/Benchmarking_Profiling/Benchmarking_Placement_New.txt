// ===========================================================================
// Benchmarking_Placement_New.txt
// Comparing classical object allocation with low-level functions
// (std::malloc, std::free, std::uninitialized_fill, std::destroy)
// Status: Working!
// ===========================================================================

constexpr std::size_t Max = 10;

class Person
{
private:
    std::string m_first;
    std::string m_last;
    std::size_t m_age;

public:
    Person() : m_first{}, m_last{}, m_age{} {}

    Person(std::string first, std::string last, size_t age)
        : m_first{ first }, m_last{ last }, m_age{ age }
    {}
};

namespace BigData_Classic_Implementation
{
    template <typename T>
    class BigData
    {
    private:
        T* m_elems{};
        std::size_t m_size{};

    public:
        // c'tor(s) / d'tor
        BigData() = default;

        BigData(std::size_t size, const T& init)
            : m_elems{ new T[size] }, m_size{ size }
        {
            std::fill(m_elems, m_elems + m_size, init);
        }

        ~BigData()
        {
            delete[] m_elems;
        }
    };
}

static void BigDataClassicInt(benchmark::State& state) {
    for (auto _ : state) {
        BigData_Classic_Implementation::BigData<int> data{ Max, 123 };
        benchmark::DoNotOptimize(data);
    }
}
BENCHMARK(BigDataClassicInt);

static void BigDataClassicString(benchmark::State& state) {
    for (auto _ : state) {
        BigData_Classic_Implementation::BigData<std::string> data{ Max, std::string{ "C++ Memory Management" } };
        benchmark::DoNotOptimize(data);
    }
}
BENCHMARK(BigDataClassicString);

static void BigDataClassicPerson(benchmark::State& state) {
    for (auto _ : state) {
        BigData_Classic_Implementation::BigData<Person> data{ Max, Person{ "AAAAAAAAAAAAAAAAAAAA", "BBBBBBBBBBBBBBBBBBBB", static_cast<size_t>(30) } };
        benchmark::DoNotOptimize(data);
    }
}
BENCHMARK(BigDataClassicPerson);

//============================================================

namespace BigData_Classic_More_Improved_Implementation
{
    template <typename T>
    class BigData
    {
    private:
        T* m_elems{};
        std::size_t m_size{};

    public:
        // c'tor(s)
        BigData() = default;

        BigData(std::size_t size, const T& init)
        {
            m_elems = static_cast<T*> (std::malloc(size * sizeof(T)));
            m_size = size;
            std::uninitialized_fill(m_elems, m_elems + m_size, init);
        }

        ~BigData()
        {
            std::destroy(m_elems, m_elems + m_size);
            std::free(m_elems);
        }
    };
}

static void BigDataImprovedInt(benchmark::State& state) {
    for (auto _ : state) {
        BigData_Classic_More_Improved_Implementation::BigData<int> data{ Max, 123 };
        benchmark::DoNotOptimize(data);
    }
}
BENCHMARK(BigDataImprovedInt);

static void BigDataImprovedString(benchmark::State& state) {
    for (auto _ : state) {
        BigData_Classic_More_Improved_Implementation::BigData<std::string> data{ Max, std::string{ "C++ Memory Management" } };
        benchmark::DoNotOptimize(data);
    }
}
BENCHMARK(BigDataImprovedString);

static void BigDataImprovedPerson(benchmark::State& state) {
    for (auto _ : state) {
        BigData_Classic_More_Improved_Implementation::BigData<Person> data{ Max, Person{ "AAAAAAAAAAAAAAAAAAAA", "BBBBBBBBBBBBBBBBBBBB", static_cast<size_t>(30) } };
        benchmark::DoNotOptimize(data);
    }
}
BENCHMARK(BigDataImprovedPerson);

// ===========================================================================
// End-of-File
// ===========================================================================
